TITULO: Mi master 


En este mismo archivo voy a hacer dos cosas:
    -Apuntar los comandos/apuntes que vaya aprendiendo sobre git
    -Crear copias y commits de cada versi√≥n que haga para ir probando los comandos de git.

en este hueco de aqui voy a ir metiendo cambios
ya que estoy trabajando por primera vez con dos ramas
y estas son las modificaciones que est√°n haci√©ndose en el master


APUNTES //===========================================================:



    -HOLA AMIGOS les traigo un comentario de alguien con muchos comandos:
    git init [iniciar el repositorio]
git add biografia.txt [a√±adir el archivo]
git commit -m ‚Äúversion 1‚Äù [guardar en la base de datos del repositorio]
git add . [a√±adir todos los cambios hechos a la base de datos del repositorio]
git commit -m ‚ÄúCambios a v1‚Äù [guadar los cambios en la db del repositorio]
git status [muestra el estado de los archivos de la base de datos]
git show [cambios que se han hecho]
git log biografia.txt [muestra el historial de cambios de un archivo]
git push [enviar hacia otro repositorio remoto lo que yo estoy haciendo]
git pull [permite traer de cualquier repositorio remoto combinando dos comandos 28. y 29.]
git status [estado del proyecto en este momento]
git rm historia.txt [devolver el comando 2. y 13. ]
git rm --cached historia.txt [descachearlo lo de debaja en la ram ‚Äúya no üòÉ‚Äù ligado al comando 12.]
git commit -m ‚Äúprimer commit‚Äù [realizar un cambio, ya para guardar]
git config [todas las configuraciones de git]
git config --list [ver la configuracion de git]
git config --list --show-origin [ver donde esta ubicado los archivos de configuracion]
git config --global user.name ‚ÄúAndres Leon‚Äù [colocarle un nombre para saber quien esta haciendo cambios]
git config --global user.email "dandresleon64@gmail.com" [colocarle un email para saber quien esta haciendo cambios]
git log historia.txt [ver el historial de este archivo]
git show historia.txt [ver las modificaciones que han existido]
git commit [cuando se va sin mensaje el lo pide y la forma de salir es "comandos 17. " y para empezar a escribir dentro de ‚Äúvi‚Äù 18. ]
git diff 3f9221603091ac205cea6fa2f88710da3857a482 e549b6799aa407cfbb7034c22b817577c85c44dc [compara dos commit]
git reset effa0d5de0734e75a7aa0186a36d36b218c45865 --hard [la version a la que quiero volver]
git log --stat [ver los cambios del historial mas detallado, con la letra ‚Äúq me pueda salir si lo que se muestra es muy largo‚Äù]
git checkout e549b6799aa407cfbb7034c22b817577c85c44dc historia.txt [checar un commit anterior y se quiere se hace un reeemplazo con el comando 04. y 05.]
git checkout master [checar el ultimo commit]
git fetch [actualizar mi repositirio local con los cambios subidos en el remoto]
git merge [combinar lo del repositorio remoto con mi directorio de trabajo || combinar ramas]
git commit -a -m ‚Äúse modifico algo‚Äù [aplicar 04. y 05. en un solo comando]
git branch cabecera [crear una rama]
git checkout cabecera [cambiar entre ramas]
git branch [saber que ramas existen]
------------------------comandos en la consola y navegacion----------------------

pwd [en donde estoy parado]
mkdir [crear una carpeta]
cat nombre_del_archivo.txt [ver el contenido de un archivo]
cd [navegar entre carpetas]
rm [borrar una carpeta o archivo]
ls [listar todo en donde este parado en el sistema]
ls -al [listar con argumentos]
clear [limpiar la consola de git]
cd [entrar a una carpeta]
cd ‚Ä¶ [devolverme o salir de esta carpeta]
cd /c [ir a un disco en especifico]
history [ultimos comandos que he ingresado]
para escoger alguno de la lista que aparece !25
touch vacio.txt [crear un archivo vacio]
rm --help [ayuda de como funciona cada comando ‚Äúrm‚Äù puede ser diferente]
code historia.txt [iniciar este archivo con vs]
esc pausa y ingresar shif + z + z [para guardar y salir de ‚Äúvi‚Äù]
espace + i [para poder empezar a escribir en ‚Äúvi‚Äù]




¬∑Tengo en favoritos de gitHUb un archivo que contiene todos los comandos de git y de gitHub, 
viene muy bien para recordar los comandos y todo porque ya es dificil, eso si, hice un rm
y me cargu√© los apuntes que ten√≠a hasta ahora ;) genial amigo, poco a poco voy aprendiendo no hay problema.


¬∑git checkout (id de la version) // te lleva a la version que tu indiques copiando el codifo
.git log (archivo) // te dice todo lo que has hecho los cambios con sus id etc
¬∑git branch (nombredelbranch)  /crea una nueva rama de trabajo
¬∑CHECKOUT (NOMBREBRANCH), en este caso cambiamos de branch

.'q' para salir del log y cosas asi
.'esc' 'i' para editar en vim
'esc' shift 'z''z' para guardar 
tienes que hacer commit siempre que vayas a hacer checkout a fuera 


si le das checkout para cambiar de rama tu archivo cambiar√° en tiempo real perdiendo los cambios, wowo
AHORA VIENE el moemnto de hacer un:
git merge eso es 